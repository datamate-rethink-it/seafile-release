name: Build image on tag push

on:
  push:
    tags:
      - "v*.*.*"
      - "pre-v*.*.*"

env:
  IMAGE_NAME: 'datamate/seafile-professional'

jobs:
  init-vars:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_github_ref_version.outputs.version }}
      prerelease_bool: ${{ steps.set_prerelease.outputs.prerelease_bool }}
      git_tag_prefix: ${{ steps.extract_github_ref_prefix.outputs.git_tag_prefix }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Validate github.ref format in case of others triggers used
        id: validate_github_ref
        run: |
          if [[ ! "${{ github.ref }}" =~ ^refs/tags/(pre-|)v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid github.ref format"
            exit 1
          fi
      - name: Extract version from github.ref
        id: extract_github_ref_version
        run: echo "version=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -Fv '{print $2}')" >> $GITHUB_OUTPUT
      - name: Set git_tag_prefix to testing or release depending on git tag
        id: extract_github_ref_prefix
        run: echo "git_tag_prefix=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -Fv '{print $1}')" >> $GITHUB_OUTPUT
      - name: Set prerelease to true or false depending on git tag prefix
        id: set_prerelease
        run: |
          if [[ "${{ steps.extract_github_ref_prefix.outputs.git_tag_prefix }}" == "pre-" ]]; then
            echo "prerelease_bool=true" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.extract_github_ref_prefix.outputs.git_tag_prefix }}" == "" ]]; then
            echo "prerelease_bool=false" >> $GITHUB_OUTPUT
          fi

  build-image-on-push:
    runs-on: ubuntu-22.04
    needs:
      - init-vars
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      # Initalized here to prevent a second repo checkout
      - name: Set short git commit SHA / needs repo checkout
        id: get_commit
        run: echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
      - name: Set current time
        id: current_time
        run: echo "time=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Authenticate against docker.seadrive.org
        run: docker login -u seafile -p zjkmid6rQibdZ=uJMuWS docker.seadrive.org
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: docker
          # Load build result to `docker images`
          load: true
          tags: |
            ${{ env.IMAGE_NAME }}:commit-${{ steps.get_commit.outputs.short_sha }}
            ${{ env.IMAGE_NAME }}:${{ needs.init-vars.outputs.git_tag_prefix }}${{ needs.init-vars.outputs.version }}
          # TODO: Add "opencontainers" labels
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: '${{ env.IMAGE_NAME }}:commit-${{ steps.get_commit.outputs.short_sha }}'
          format: 'table'
          # Let workflow fail if image contains vulnerabilities
          # exit-code: '1'
          scanners: 'vuln,misconfig'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Push image
        uses: docker/build-push-action@v6
        with:
          context: docker
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:commit-${{ steps.get_commit.outputs.short_sha }}
            ${{ env.IMAGE_NAME }}:${{ needs.init-vars.outputs.git_tag_prefix }}${{ needs.init-vars.outputs.version }}
