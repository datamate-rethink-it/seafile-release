services:
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:?Variable is not set or empty}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?Variable is not set or empty}
    volumes:
      - /opt/seafile-grafana:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      caddy: ${GRAFANA_HOSTNAME:?Variable is not set or empty}
      caddy.reverse_proxy: "{{upstreams 3000}}"
    networks:
      - frontend-net
      - logging

  loki:
    image: grafana/loki:3.1.1
    restart: unless-stopped
    container_name: loki
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logging

  promtail:
    image: grafana/promtail:3.1.1
    restart: unless-stopped
    container_name: promtail
    depends_on:
      - loki
    volumes:
      - ./config/promtail.yml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    networks:
      - logging
    healthcheck:
      # TODO: Fix healthcheck
      test: wget --quiet --tries=1 --output-document=- http://localhost:9080/ready | grep -q -w ready || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.54.1
    restart: unless-stopped
    container_name: prometheus
    # TODO: Is this necessary?
    user: "root:root"
    volumes:
       - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
       - /opt/seafile-prometheus:/prometheus-data
    command:
      - '--enable-feature=native-histograms'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus-data'
      - '--storage.tsdb.retention.time=365d'
    networks:
      - logging
    # TODO: Add healthcheck

  node-exporter:
    image: prom/node-exporter:v1.8.2
    restart: unless-stopped
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - logging
    # TODO: Add healthcheck

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    restart: unless-stopped
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - logging
    privileged: true

networks:
  logging:
    name: logging
